/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ModelAlgorithm.*;
import TableModel.DataTableModel;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author MrVu
 */



public class MainForm extends javax.swing.JFrame {
    private DataTableModel tableModel;
    private DefaultComboBoxModel algoModel;
    private boolean isProcessClicked;

    

    private enum AlgorithmType {
        FIFO,
        QUTDQ,
        QUTKDQ,
        PR,
        SJFD,
        SJFKD,
        SRJF
    }
    
    // Thuat toan hien tai
    Algorithm currentAlgorithm;
    
    // Loai thuat toan
    private AlgorithmType currentAlgoType;
    
    // Table infor
    private final ArrayList<String> columnName = new ArrayList();
    private Integer[][] data;
    
    // Process
    private int numberProcess = 0;
    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTable = new javax.swing.JTable();
        numProcessTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        enterBtn = new javax.swing.JButton();
        clearTableBtn = new javax.swing.JButton();
        quantumTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        okBtn = new javax.swing.JButton();
        processBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        algorithmCB.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        algorithmCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmCBActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Waiting Time of Process Calculating");

        inputTable.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        inputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Column1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inputTable);

        numProcessTF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Process number:");

        enterBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        enterBtn.setText("Enter");
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });

        clearTableBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        clearTableBtn.setText("Clear table");

        quantumTF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Quantum");

        okBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        okBtn.setText("Ok");

        processBtn.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        processBtn.setText("Process");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(algorithmCB, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(numProcessTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(enterBtn)
                            .addGap(81, 81, 81)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(quantumTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(okBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearTableBtn))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numProcessTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(enterBtn)
                    .addComponent(clearTableBtn)
                    .addComponent(quantumTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(okBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        bindingAlgorithmCB();
        isProcessClicked = false;
        quantumTF.disable();
        okBtn.setVisible(false);
                
        currentAlgorithm = new Algorithm();
        currentAlgoType = (AlgorithmType)algorithmCB.getSelectedItem();
        bindingInputTable();
    }//GEN-LAST:event_formWindowOpened

    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBtnActionPerformed
        // TODO add your handling code here:
        String tmp = numProcessTF.getText().trim();
        
        try {
            numberProcess = Integer.parseInt(tmp);
            numProcessTF.setBackground(Color.green);
            
            data = new Integer[numberProcess][6];
            currentAlgorithm = new Algorithm(numberProcess, data);
            bindingInputTable();
            
        } catch (NumberFormatException e) {
            numProcessTF.setBackground(Color.red);
        }
    }//GEN-LAST:event_enterBtnActionPerformed

    private void performAlgorithm() {
        switch (currentAlgoType) {
            case FIFO:
                currentAlgorithm.processFIFO();
                break;
                
            case QUTDQ:
                currentAlgorithm.processQUTDQ();
                break;
                
            default:
                break;
        }
    }
    
    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
        // verify all data is assigned
        isProcessClicked = true;
        tableModel.fireTableDataChanged();
        performAlgorithm();
        bindingOutputTable();
    }//GEN-LAST:event_processBtnActionPerformed

    private void clearResultColumn() {
        switch (currentAlgoType) {
            case FIFO:
                for (int i = 0; i < numberProcess; i++) {
                    data[i][3] = data[i][4] = null;
                }
                break;
                
        case QUTDQ:
            for (int i = 0; i < numberProcess; i++) {
                data[i][4] = data[i][5] = null;
            }
            break;
            default:
                break;
        }
    }
    
    private void algorithmCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmCBActionPerformed
        // TODO add your handling code here:
        
        clearResultColumn();
        
        currentAlgoType = (AlgorithmType)algorithmCB.getSelectedItem();
        
        columnName.clear();
        columnName.add("No");
        columnName.add("Processing Time");
        columnName.add("Entrance Time");
        
        switch (currentAlgoType) {
            case FIFO:
                break;
                
            case QUTDQ:
                columnName.add("Priority");
                break;
                
            case QUTKDQ:
                break;
                
            case PR:
                break;
                
            case SJFD:
                break;
                
            case SJFKD:
                break;
                
            case SRJF:
                break;
                
            default:
                break;
        }
        
        tableModel = new DataTableModel(columnName, data);
        inputTable.setModel(tableModel);
        
        TableColumn column = inputTable.getColumnModel().getColumn(0);
        column.setMinWidth(40);
        column.setMaxWidth(40);
        inputTable.updateUI();
    }//GEN-LAST:event_algorithmCBActionPerformed

        private void bindingAlgorithmCB() {
              
        algoModel = new DefaultComboBoxModel(AlgorithmType.values());
        algorithmCB.setModel(algoModel);
        currentAlgoType = AlgorithmType.FIFO;
    }

    private void bindingInputTable() {
        columnName.clear();
        columnName.add("No");
        columnName.add("Processing Time");
        columnName.add("Entrance Time");
        
        switch (currentAlgoType) {
            case FIFO:
                break;
                
            case QUTDQ:
                columnName.add("Priority");
                break;
                
            case QUTKDQ:
                break;
                
            case PR:
                break;
                
            case SJFD:
                break;
                
            case SJFKD:
                break;
                
            case SRJF:
                break;
                
            default:
                break;
        }
        
        tableModel = new DataTableModel(columnName, data);
        inputTable.setModel(tableModel);
        
        TableColumn column = inputTable.getColumnModel().getColumn(0);
        column.setMinWidth(40);
        column.setMaxWidth(40);
        inputTable.updateUI();
    }
    
    private void bindingOutputTable() {
        columnName.clear();
        columnName.add("No");
        columnName.add("Processing Time");
        columnName.add("Entrance Time");
        
        
        switch (currentAlgoType) {
            case FIFO:
                break;
                
            case QUTDQ:
                columnName.add("Priority");
                break;
            case QUTKDQ:
                break;
            case PR:
                break;
            case SJFD:
                break;
            case SJFKD:
                break;
            case SRJF:
                break;
            default:
                break;
        }
        
        columnName.add("Finish Time");
        columnName.add("Waiting Time");
        
        tableModel = new DataTableModel(columnName, data);
        inputTable.setModel(tableModel);
        
        TableColumn column = inputTable.getColumnModel().getColumn(0);
        column.setMinWidth(40);
        column.setMaxWidth(40);
        inputTable.updateUI();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmCB;
    private javax.swing.JButton clearTableBtn;
    private javax.swing.JButton enterBtn;
    private javax.swing.JTable inputTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numProcessTF;
    private javax.swing.JButton okBtn;
    private javax.swing.JButton processBtn;
    private javax.swing.JTextField quantumTF;
    // End of variables declaration//GEN-END:variables


}
